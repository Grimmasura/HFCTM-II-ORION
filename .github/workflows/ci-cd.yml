name: Full CI/CD Pipeline for HFCTM-II-ORION

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight
  workflow_dispatch:  # Allows manual trigger from GitHub Actions UI

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run tests
        run: |
          pytest --junitxml=test-results.xml

      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results.xml

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8 linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  versioning:
    name: Automate Versioning & Tagging
    runs-on: ubuntu-latest
    needs: [build, lint]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Bump version and push tag
        id: versioning
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          latest_version=$(git tag --sort=-v:refname | head -n 1)
          if [[ -z "$latest_version" ]]; then latest_version="v0.1.0"; fi
          new_version=$(echo $latest_version | awk -F. -v OFS=. '{$NF++;print}')
          git tag $new_version
          git push origin $new_version
          echo "::set-output name=tag::$new_version"

  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: versioning

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.versioning.outputs.tag }}
          release_name: Release ${{ needs.versioning.outputs.tag }}
          body: "Automated release of version ${{ needs.versioning.outputs.tag }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to server
        env:
          API_KEY: ${{ secrets.PRODUCTION_API_KEY }}
        run: |
          chmod +x deploy.sh
          ./deploy.sh
